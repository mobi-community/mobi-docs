{"/about":{"title":"About","data":{"":"학습 내용을 정리하는 공간입니다~\n나중에 자세히 작성하겠습니다~"}},"/":{"title":"Introduction","data":{"":"MOBI-DOCS","contributors#👩‍💻Contributors🧑‍💻":"Jane\nZero"}},"/libs":{"title":"Libs","data":{"-index#📑 Index":"StackFlow\nNextAuth\nFramerMotion\nLottie"}},"/react":{"title":"React","data":{}},"/react/useFormState":{"title":"Useformstate","data":{"-useformstate#✨ useFormState":"⚠️ CANARY!\n해당 기능은 아직 React의 Canary/Experimental 채널에서만 사용 가능합니다.\n또한 해당 기능의 이점을 완전히 사용하려면 React의 서버 컴포넌트를 지원하는 프레임워크의 사용이 필요합니다.","-summary#📑 Summary":"useFormState란 form 액션의 결과에 기반하여 상태를 업데이트 할 수 있게 해주는 훅 함수입니다.\nconst [state, formAction] = useFormState(fn, initialState, permalink?);","-어떻게-사용할-수-있까요#🤔 어떻게 사용할 수 있까요?":"form 액션이 호출되었을 때 업데이트 될 상태 생성을 위해 컴포넌트의 상단에 useFormState를 호출해줍니다.\nform이 제출된 마지막 순간에 액션에서 반환된 값에 접근할 수 있습니다.\nimport { useFormState } from \"react-dom\";\r\n\r\nfunction StatefulForm({}) {\r\n  const [state, formAction] = useFormState(action, null);\r\n  return (\r\n    <form>\r\n      {state}\r\n      <button formAction={formAction}>Increment</button>\r\n    </form>\r\n  );\r\n}\nuseFormState에 초기 상태로서 이미 존재하는 form 액션 함수를 넘겨줄 수 있습니다.\n이때 useFormState는 당신의 form에서 사용하는 새로운 액션을 가장 최신의 form 상태와 함께 반환합니다.\n가장 최신의 form 상태는 또한 당신이 제공한 함수에도 전달됩니다.\nimport { useFormState } from \"react-dom\";\r\n\r\n// form 액션 함수\r\nasync function increment(previousState, formData) {\r\n  return previousState + 1;\r\n}\r\n\r\nfunction StatefulForm({}) {\r\n  const [state, formAction] = useFormState(increment, 0);\r\n  return (\r\n    <form>\r\n      {state}\r\n      <button formAction={formAction}>Increment</button>\r\n    </form>\r\n  );\r\n}\nform 상태란?\nform이 마지막으로 제출되었을 때 액션에 의해 반환된 값을 의미합니다.\n아직 form이 제출되지 않았다면 form의 상태는 당신이 전달한 초기 상태가 form의 상태가 됩니다.\naction 함수\nform이 제출되면 제공된 액션 함수가 호출되고, 이 함수의 반환 값은 이후 form의 현재 상태가 됩니다.\nfunction action(currentState, formData) {\r\n  // ...\r\n  return \"next state\";\r\n}\ncurrentState\n액션 함수의 첫 번째 인자\nform이 처음 제출 되었을 때에는 제공된 초기값이고, 이후 제출 과정에서는 액션이 가장 마지막에 호출되었을 때의 반환 값이 현재 상태 값이 됩니다.\n다른 인자들의 경우 useFormState를 사용하지 않았을 때와 동일하게 전달됩니다.\nParameters\nParameter\tDetail\tfn\t- form이 제출되거나 버튼이 클릭되었을 때 호출될 함수  - 함수가 호출되면, form의 이전 상태값을 초기 인자로 받고 이후에는 form 액션이 일반적으로 받게 되는 인수들을 받습니다.  - form의 이전 상태는 처음에는 당신이 전달한 initialState가 될 것이고, 이후에는 이전 반환값이 될 것입니다.\tinitialState\t- 상태의 초기값  - 직렬화(메모리를 디스트에 저장하거나 네트워크 통신에 사용하기 위한 형식으로 변환하는 것)가 가능한 모든 값이 올 수 있습니다.  - 이 인수는 액션의 첫 번째 호출 이후에는 무시됩니다.\tpermalink (optional)\t- 이 form이 수정하게 될 고유한 페이지 URL을 포함하는 문자열  - 피드와 같이 동적인 콘텐츠가 있는 페이지에서 점진적 변화와 함께 사용할 경우  : 만약 fn이 서버 액션이고 form이 JS 번들이 로드되기 전에 제출되었다면 브라우저는 현재 페이지 URL이 아닌 특정된 permalink URL로 이동합니다.  - React가 상태를 어떻게 전달할지 알 수 있도록 동일한 액션 fn과 permalink를 포함하는 같은 form 컴포넌트가 목적지인 페이지에서도 렌더링되어야 합니다.  - form이 hydrate 되고 나면 이 파라미터는 효력을 잃습니다.\t\n반환값\n두 개의 값을 갖는 배열을 반환합니다.\n[현재 상태, 새로운 액션]\n현재 상태\n처음에는 전달한 initialState와 일치합니다.\n액션이 호출된 이후(form이 제출된 이후)에는 당신이 제공한 액션에 의해 반환되는 값과 일치하게 됩니다.\n새로운 액션\nform 컴포넌트의 action prop으로 전달할 수 있습니다.\nform 내부의 버튼 컴포넌트에 formAction prop으로 전달할 수 있습니다.","-언제-사용할-수-있을까요#🧐 언제 사용할 수 있을까요?":"","-form-제출-이후-form-에러-보여주기#📍 form 제출 이후 form 에러 보여주기":"서버 액션에 의해 반환되는 에러 메세지를 보여주려면 호출되는 액션을 useFormState로 감싸야 합니다.\nform 컴포넌트\nimport { useState } from \"react\";\r\nimport { useFormState } from \"react-dom\";\r\nimport { addToCart } from \"./actions.js\";\r\n\r\nfunction AddToCartForm({ quantity, itemTitle }) {\r\n  const [message, formAction] = useFormState(addToCart, null);\r\n  return (\r\n    <form action={formAction}>\r\n      <h2>{itemTitle}</h2>\r\n      <input type='hidden' name='quantity' value={quantity} />\r\n      <button type='submit'>장바구니 추가</button>\r\n      {message}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <h1>useFormState</h1>\r\n      <AddToCartForm quantity='0' itemTitle='자바스크립트 Deep Dive' />\r\n      <AddToCartForm quantity='10' itemTitle='리액트 Deep Dive' />\r\n    </>\r\n  );\r\n}\naction 함수\n\"use server\";\r\n\r\nexport async function addToCart(prevState, queryData) {\r\n  const quantity = queryData.get(\"quantity\");\r\n  if (Number(quantity) > 0) {\r\n    return \"정상적으로 추가되었습니다.\";\r\n  } else {\r\n    return \"🚨 Error! 상품이 매진 되어 추가할 수 없습니다.\";\r\n  }\r\n}","-form-제출-이후-구조화된-정보-보여주기#📍 form 제출 이후 구조화된 정보 보여주기":"","-사용-시-주의할-점#📢 사용 시 주의할 점":"import를 제대로 하자!\nuseFormState는 react가 아닌 react-dom에서 import 되어야 합니다.\nReact 서버 컴포넌트를 지원하는 프레임워크와 함께 사용할 경우\nuseFormState는 form의 제출에 따른 서버의 응답값을 hydration 작업이 완료되기도 전에 보여지도록 해줍니다.\n따라서 서버 컴포넌트와 함께 사용할 때 useFormState는 JS가 클라이언트 측에서 실행되기 전에 form을 상호작용 가능하도록 만들어줍니다.\n하지만 서버 컴포넌트와 함께 사용하지 않는다면 이 기능은 컴포넌트의 일반 상태와 동일합니다.","-troubleshooting#🚨 TroubleShooting":"","-references#🔎 References":"React.dev - useFormState\nNew client-side hooks coming to React 19"}}}